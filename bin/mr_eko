#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), '../lib')
require 'mr_eko'
require 'optparse'

require 'sequel/extensions/migration'
Sequel::Migrator.apply(MrEko.connection, File.join(File.dirname(__FILE__), "..", "db", "migrate"))

def parse_options
  
  options = { :format => :text }

  OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.separator ""
    opts.separator "Specific options:"
    opts.on("-p", "--preset NAME", String, "Select a preset.  Options are (#{MrEko::Presets::FACTORY.keys.join(', ')})") do |preset|
      options[:preset] = preset
    end
    
    opts.on("-m", "--min-tempo BPM", Integer, "Specify minimum tempo") do |bpm|
      options[:min_tempo] = bpm
    end

    opts.on("-M", "--max-tempo BPM", Integer, "Specify maximum tempo") do |bpm|
      options[:max_tempo] = bpm
    end

    opts.on("-t", "--time-sig SIG", Integer, "Specify time signature") do |ts|
      options[:time_signature] = ts
    end

    opts.on("-l", "--max-length SEC", Integer, "Specify maximum song length (in seconds)") do |sec|
      options[:max_duration] = sec
    end
    
    opts.on("-d", "--mode MODE", String, "Specify mode (minor or major)") do |mode|
      unless MrEko::Song::MODES.include?(mode)
        raise ArgumentError.new("Mode must be #{MrEko::Song::MODES.join(' or ')}") 
      end
      options[:mode] = mode
    end

    opts.on("-f", "--format FORMAT", MrEko::Playlist::FORMATS,
            "Select output type (#{MrEko::Playlist::FORMATS.join(', ')})") do |format|
      unless MrEko::Playlist::FORMATS.include?(format)
        raise ArgumentError.new("Format must be one of #{MrEko::Playlist::FORMATS.join(', ')}") 
      end
      options[:format] = format
    end


    opts.separator ""
    opts.separator "Common options:"

    # No argument, shows at tail.  This will print an options summary.
    # Try it and see!
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    # Another typical switch to print the version.
    # opts.on_tail("--version", "Show version") do
    #   puts OptionParser::Version.join('.')
    #   exit
    # end
  end.parse!

  options
end


case ARGV[0]
when 'scan'
  ARGV.shift
  ARGV.each do |file|
    MrEko::Song.create_from_file!(file)
  end
when 'playlist'
  options = parse_options
  format = options.delete(:format)
  playlist = MrEko::Playlist.create_from_options(options)
  puts playlist.inspect
  puts playlist.output(format)
else
  puts "nothing for #{ARGV[0]}"
end


#$: droptheboom --min-tempo=130 --max-tempo=150 --mode=minor --output=cool_playlist.pls
# opts = ParseOpts.blahblah
# filtered_songs = MrEko.songs(opts)
# MrEko.create_playlist(filtered_songs)



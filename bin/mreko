#!/usr/bin/env ruby
$0 = 'Mr Eko'

$: << File.join(File.dirname(__FILE__), '../lib')
require 'mr_eko'
require 'optparse'

def parse_options

  options = { :format => :pls }

  OptionParser.new do |opts|
    opts.banner = "MrEko version #{MrEko::VERSION}\n"
    opts.banner += "Usage: mreko scan|playlist [options]"

    opts.separator ""
    opts.separator "Playlist options:"

    opts.on("-p", "--preset NAME", String, "Select a preset.  Options are: #{MrEko::Presets::FACTORY.keys.join(', ')}") do |preset|
      options[:preset] = preset
    end

    opts.on("-t", "--tempo BPM", "Specify tempo") do |bpm|
      options[:tempo] = bpm
    end

    opts.on("-s", "--time-sig SIG", Integer, "Specify time signature") do |ts|
      options[:time_signature] = ts
    end

    opts.on("-l", "--duration SEC", "Specify song length (in seconds)") do |sec|
      options[:duration] = sec
    end

    opts.on("-d", "--danceability NUM", "Specify danceability (from 1 to 100)") do |num|
      options[:danceability] = num
    end

    opts.on("-e", "--energy NUM", "Specify energy (from 1 to 100)") do |num|
      options[:energy] = num
    end

    opts.on("-w", "--loudness NUM", "Specify loudness (from 1 to 100)") do |num|
      options[:loudness] = num
    end

    opts.on("-k", "--key KEY", "Specify chromatic key (from C to B)") do |key|
      options[:key] = key
    end

    opts.on("-o", "--mode MODE", String, "Specify mode (minor or major)") do |mode|
      unless MrEko::MODES.include?(mode)
        raise ArgumentError.new("Mode must be #{MrEko::MODES.join(' or ')}")
      end
      options[:mode] = mode
    end

    opts.on("-x", "--timed SEC", "Limit this playlist to a certain length (in seconds)*") do |length|
      options[:timed] = length
    end

    opts.on("-z", "--final VAL", "Sets the ending value of a Timed Playlist") do |val|
      options[:final] = val
    end

    opts.on("-f", "--format FORMAT", MrEko::Playlist::FORMATS,
            "Select output type (#{MrEko::Playlist::FORMATS.join(', ')})") do |format|
      unless MrEko::Playlist::FORMATS.include?(format)
        raise ArgumentError.new("Format must be one of #{MrEko::Playlist::FORMATS.join(', ')}")
      end
      options[:format] = format
    end

    opts.on("-x", "--tags-only", "Only perform lookups using ID3 tags (no analyzing)") do
      options[:tags_only] = true
    end

    opts.on("-v", "--version", "Output version") do
      puts MrEko::VERSION
      exit
    end

    # No argument, shows at tail.  This will print an options summary.
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      puts <<-EOM

* Note that if --timed is passed, you may only specify one facet, e.g --tempo. This value will be used as the starting point.
You must also pass --final to set the final value. So for a 10 min. playlist which starts at 120 BPM and ends at 200 BPM:
  mr_eko playlist --timed 600 --tempo 120 --final 200\n
      EOM
      exit
    end

  end.parse!

  options
end


options = parse_options

case ARGV[0]
when 'scan'
  ARGV.shift

  files = ARGV.map do |arg|
    if File.directory?(arg)
      Dir.glob("#{arg}/**/*.mp3")
    else
      File.expand_path arg
    end
  end.flatten

  puts "Found #{files.length} MP3s to process..."
  files.each do |file|
    MrEko::Song.create_from_file!(file, options)
  end

when 'playlist'
  format = options.delete(:format)

  if length = options.delete(:timed)
    final = options.delete(:final)
    raise ArgumentError.new("You may only provide one facet when creating a Timed Playlist!!") if options.keys.size > 1

    facet    = options.keys.first
    initial  = options[facet]
    playlist = MrEko::TimedPlaylist.create(:length => length, :facet => facet, :initial => initial, :final => final)
  else
    playlist = MrEko::Playlist.create_from_options(options)
  end

  puts playlist.output(format)

else
  puts "nothing for #{ARGV[0]}"
end

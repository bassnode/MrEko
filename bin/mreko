#!/usr/bin/env ruby
$0 = 'Mr Eko'

$: << File.join(File.dirname(__FILE__), '../lib')
require 'mr_eko'
require 'optparse'

require 'sequel/extensions/migration'
Sequel::Migrator.apply(MrEko.connection, File.join(File.dirname(__FILE__), "..", "db", "migrate"))

def parse_options

  options = { :format => :text }

  OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.separator ""
    opts.separator "Specific options:"
    opts.on("-p", "--preset NAME", String, "Select a preset.  Options are (#{MrEko::Presets::FACTORY.keys.join(', ')})") do |preset|
      options[:preset] = preset
    end

    opts.on("-t", "--tempo BPM", "Specify tempo") do |bpm|
      options[:tempo] = bpm
    end

    opts.on("-s", "--time-sig SIG", Integer, "Specify time signature") do |ts|
      options[:time_signature] = ts
    end

    opts.on("-l", "--duration SEC", "Specify song length (in seconds)") do |sec|
      options[:duration] = sec
    end

    opts.on("-d", "--danceability NUM", "Specify danceability (from 1 to 100)") do |num|
      options[:danceability] = num
    end

    opts.on("-e", "--energy NUM", "Specify energy (from 1 to 100)") do |num|
      options[:energy] = num
    end

    opts.on("-w", "--loudness NUM", "Specify loudness (from 1 to 100)") do |num|
      options[:loudness] = num
    end

    opts.on("-o", "--mode MODE", String, "Specify mode (minor or major)") do |mode|
      unless MrEko::MODES.include?(mode)
        raise ArgumentError.new("Mode must be #{MrEko::MODES.join(' or ')}")
      end
      options[:mode] = mode
    end

    opts.on("-f", "--format FORMAT", MrEko::Playlist::FORMATS,
            "Select output type (#{MrEko::Playlist::FORMATS.join(', ')})") do |format|
      unless MrEko::Playlist::FORMATS.include?(format)
        raise ArgumentError.new("Format must be one of #{MrEko::Playlist::FORMATS.join(', ')}")
      end
      options[:format] = format
    end

    opts.on("-x", "--tags-only", "Only perform lookups using ID3 tags (no analyzing)") do
      options[:tags_only] = true
    end

    opts.separator ""
    opts.separator "Common options:"

    # No argument, shows at tail.  This will print an options summary.
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

  end.parse!

  options
end


options = parse_options

case ARGV[0]
when 'scan'
  ARGV.shift
  ARGV.each do |file|
    MrEko::Song.create_from_file!(file, options)
  end
when 'playlist'
  format = options.delete(:format)
  playlist = MrEko::Playlist.create_from_options(options)
  puts playlist.output(format)
else
  puts "nothing for #{ARGV[0]}"
end
